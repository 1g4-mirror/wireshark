This directory contains the code necessary to build native front-ends for
Ethereal.  At the present time Windows is the only platform supported.


Introduction:

Each front-end is made up of code created by feeding a set of XUL files to
a Python script.  The only frontend script we have so far (win32csdk.py)
creates plain C code and uses the Windows Platform SDK.

The XUL files and parsers are currently pseudo-XUL, and do not strictly
conform to the spec.

This environment is very stripped-down compared to Mozilla's XPFE.  There
is no JavaScript, XBL, chrome, or XPCOM.

There's no reason a frontend couldn't use C++, Java, C#, Python, Perl,
assembler, or any other language, as long as it can link with the rest of
Ethereal's code base.  We could also create virtual frontends, e.g. for
unit/regression testing.

This directory contains the following:

  - ethereal-main.xul, *-dialog.xul

    These are XUL files used to generate the main Ethereal window and each
    dialog

  - *.py

    Python scripts that read the XUL files and generate code.  The main
    script is xulender.py; it should be run without any arguments.
    It calls routines in win32csdk.py to create code.

	Each frontend module MUST:

    - Define a function named "get_func_prefix()" that returns a prefix
      name for the module.  The prefix name for win32csdk.py is "win32".

    - Define start and stop (if needed) functions for for each XUL entity
      name.  Start functions MUST be named <module>_gen_<entity>,
      e.g.  win32_gen_menuitem.  Stop functions MUST be named
      <module>_gen_<entity>_end, e.g. kde_gen_checkbox_end.

      Each function MUST take one argument, a Python xml.dom Node object.

      Utility routines can be found in frontendutil.py.  

  - win32-c-sdk/

    This directory contains code generated by win32csdk.py along with 
    hand-written glue routines.


Example:

In order to build "ethereal-main.c" in the "win32-c-sdk" directory,
Makefile.nmake runs "$(PYTHON) ..\xulender.py ethereal-main.xul".

When xulender.py encounters the "<splitter />" tag, it calls 
"win32_gen_splitter()" in the win32csdk.py module.  This adds

	/* Begin <splitter> */
	win32_box_add_splitter(cur_box, -1);
	/* End <splitter> */

to ethereal-main.c.


To do:
- Have xulender create a list of required glue routines.
- Add more frontends, of course!  MacOS X and QT seem like good candidates.
- Actually link <menuitem>s to <command>s, and link them in both directions
  so that disabling will work according to the spec?
- Move CodeGenError class out of win32-c-sdk.py, so that xulender.py can use
  it.
- Move hierarchy checks from win32-c-sdk.py to xulender.py?
- We define an ondoubleclick() method, even though the XUL spec doesn't.
